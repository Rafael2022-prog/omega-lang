name: 🚀 OMEGA Native Release

on:
  push:
    tags:
      - 'v*.*.*'

jobs:
  create-release:
    name: 📦 Create Native Release
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        fetch-depth: 0

    - name: 🔧 Setup PowerShell
      run: |
        # Install PowerShell on Ubuntu
        sudo apt-get update
        sudo apt-get install -y wget apt-transport-https software-properties-common
        wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
        sudo dpkg -i packages-microsoft-prod.deb
        sudo apt-get update
        sudo apt-get install -y powershell

    - name: 🏗️ Build OMEGA Native
      run: |
        pwsh -ExecutionPolicy Bypass -File build_omega_native.ps1 -Clean

    - name: ✅ Test Native Build
      run: |
        pwsh -ExecutionPolicy Bypass -File scripts/simple_test.ps1 -SkipBuild

    - name: 📝 Generate changelog
      id: changelog
      run: |
        # Extract version from tag
        VERSION=${GITHUB_REF#refs/tags/}
        echo "VERSION=$VERSION" >> $GITHUB_OUTPUT
        
        # Generate changelog for native OMEGA
        echo "CHANGELOG<<EOF" >> $GITHUB_OUTPUT
        echo "## OMEGA Native $VERSION" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🚀 Native Features" >> $GITHUB_OUTPUT
        echo "- Pure native OMEGA compiler implementation" >> $GITHUB_OUTPUT
        echo "- Cross-platform PowerShell-based tooling" >> $GITHUB_OUTPUT
        echo "- No external dependencies (Rust/Node.js free)" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🐛 Bug Fixes" >> $GITHUB_OUTPUT
        echo "- Bug fixes and improvements" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 📚 Documentation" >> $GITHUB_OUTPUT
        echo "- Documentation updates" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "### 🔧 Technical Changes" >> $GITHUB_OUTPUT
        echo "- Internal improvements and refactoring" >> $GITHUB_OUTPUT
        echo "" >> $GITHUB_OUTPUT
        echo "**Full Changelog**: https://github.com/Rafael2022-prog/omega-lang/compare/v1.0.0...$VERSION" >> $GITHUB_OUTPUT
        echo "EOF" >> $GITHUB_OUTPUT

    - name: 📦 Create release assets
      run: |
        mkdir -p release-assets
        
        # Copy VS Code extension
        cp omega-vscode-extension/*.vsix release-assets/
        
        # Create source archive
        git archive --format=zip --prefix=omega-lang-${{ steps.changelog.outputs.VERSION }}/ HEAD > release-assets/omega-lang-${{ steps.changelog.outputs.VERSION }}-source.zip
        
        # Create installation scripts archive
        zip -r release-assets/omega-lang-${{ steps.changelog.outputs.VERSION }}-install-scripts.zip install/ scripts/

    - name: 🚀 Create GitHub Release
      uses: actions/create-release@v1
      id: create_release
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        tag_name: ${{ github.ref }}
        release_name: OMEGA ${{ steps.changelog.outputs.VERSION }}
        body: ${{ steps.changelog.outputs.CHANGELOG }}
        draft: false
        prerelease: false

    - name: 📤 Upload VS Code Extension
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./omega-vscode-extension/omega-lang-${{ steps.changelog.outputs.VERSION }}.vsix
        asset_name: omega-lang-${{ steps.changelog.outputs.VERSION }}.vsix
        asset_content_type: application/zip

    - name: 📤 Upload Source Archive
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/omega-lang-${{ steps.changelog.outputs.VERSION }}-source.zip
        asset_name: omega-lang-${{ steps.changelog.outputs.VERSION }}-source.zip
        asset_content_type: application/zip

    - name: 📤 Upload Installation Scripts
      uses: actions/upload-release-asset@v1
      env:
        GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      with:
        upload_url: ${{ steps.create_release.outputs.upload_url }}
        asset_path: ./release-assets/omega-lang-${{ steps.changelog.outputs.VERSION }}-install-scripts.zip
        asset_name: omega-lang-${{ steps.changelog.outputs.VERSION }}-install-scripts.zip
        asset_content_type: application/zip

  publish-vscode:
    name: 📦 Publish VS Code Extension
    runs-on: ubuntu-latest
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd omega-vscode-extension
        npm ci

    - name: 🚀 Publish to VS Code Marketplace
      run: |
        cd omega-vscode-extension
        npx vsce publish -p ${{ secrets.VSCE_TOKEN }}

    - name: 🚀 Publish to Open VSX Registry
      run: |
        cd omega-vscode-extension
        npx ovsx publish -p ${{ secrets.OVSX_TOKEN }}

  notify-community:
    name: 📢 Notify Community
    runs-on: ubuntu-latest
    needs: [create-release, publish-vscode]
    if: always() && needs.create-release.result == 'success'

    steps:
    - name: 📢 Post to Discord (if configured)
      if: secrets.DISCORD_WEBHOOK_URL
      run: |
        curl -H "Content-Type: application/json" \
             -X POST \
             -d '{
               "embeds": [{
                 "title": "🚀 New OMEGA Release!",
                 "description": "OMEGA ${{ github.ref_name }} has been released!",
                 "color": 5814783,
                 "fields": [
                   {
                     "name": "Version",
                     "value": "${{ github.ref_name }}",
                     "inline": true
                   },
                   {
                     "name": "Download",
                     "value": "[GitHub Releases](https://github.com/Rafael2022-prog/omega-lang/releases/latest)",
                     "inline": true
                   }
                 ],
                 "timestamp": "'$(date -u +%Y-%m-%dT%H:%M:%S.000Z)'"
               }]
             }' \
             ${{ secrets.DISCORD_WEBHOOK_URL }}

    - name: 📧 Send email notification (if configured)
      if: secrets.SMTP_SERVER
      run: |
        echo "New OMEGA release ${{ github.ref_name }} is available!" | \
        mail -s "OMEGA ${{ github.ref_name }} Released" \
             -S smtp=${{ secrets.SMTP_SERVER }} \
             -S smtp-auth=login \
             -S smtp-auth-user=${{ secrets.SMTP_USER }} \
             -S smtp-auth-password=${{ secrets.SMTP_PASSWORD }} \
             ${{ secrets.NOTIFICATION_EMAIL }}

  update-documentation:
    name: 📚 Update Documentation
    runs-on: ubuntu-latest
    needs: create-release

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4
      with:
        token: ${{ secrets.GITHUB_TOKEN }}

    - name: 📝 Update version in documentation
      run: |
        VERSION=${GITHUB_REF#refs/tags/v}
        
        # Update version in README
        sed -i "s/Version: [0-9]\+\.[0-9]\+\.[0-9]\+/Version: $VERSION/g" README.md
        
        # Update version in docs
        find docs/ -name "*.md" -exec sed -i "s/version [0-9]\+\.[0-9]\+\.[0-9]\+/version $VERSION/g" {} \;

    - name: 💾 Commit version updates
      run: |
        git config --local user.email "action@github.com"
        git config --local user.name "GitHub Action"
        git add -A
        git diff --staged --quiet || git commit -m "📝 Update documentation for release ${{ github.ref_name }}"
        git push

  sync-wiki:
    name: 🔄 Sync Wiki after Release
    needs: create-release
    if: startsWith(github.ref, 'refs/tags/v') && !contains(github.ref, '-')
    uses: ./.github/workflows/sync-wiki.yml
    secrets:
      WIKI_PAT: ${{ secrets.WIKI_PAT }}
    with:
      only_md: true
      file_glob: ""
      mapping_file: "wiki/mapping.json"