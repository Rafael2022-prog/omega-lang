name: 🚀 OMEGA Native CI/CD Pipeline

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]

jobs:
  test:
    name: 🧪 Native OMEGA Test Suite
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🔧 Setup PowerShell (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        if [ "$RUNNER_OS" == "Linux" ]; then
          # Install PowerShell on Ubuntu
          sudo apt-get update
          sudo apt-get install -y wget apt-transport-https software-properties-common
          wget -q "https://packages.microsoft.com/config/ubuntu/$(lsb_release -rs)/packages-microsoft-prod.deb"
          sudo dpkg -i packages-microsoft-prod.deb
          sudo apt-get update
          sudo apt-get install -y powershell
        elif [ "$RUNNER_OS" == "macOS" ]; then
          # Install PowerShell on macOS
          brew install --cask powershell
        fi

    - name: ✅ Verify OMEGA Native Binary
      run: |
        if [ "$RUNNER_OS" == "Windows" ]; then
          if (Test-Path "omega.exe") {
            Write-Host "✅ OMEGA native binary found"
            .\omega.exe --version
          } else {
            Write-Host "❌ OMEGA binary not found, building..."
            .\build_omega_native.ps1
          }
        else
          if [ -f "omega.exe" ]; then
            echo "✅ OMEGA native binary found"
            pwsh -c ".\omega.exe --version"
          else
            echo "❌ OMEGA binary not found, building..."
            pwsh -File build_omega_native.ps1
          fi
        fi
      shell: ${{ runner.os == 'Windows' && 'pwsh' || 'bash' }}

    - name: 🧪 Run Native OMEGA Tests (Linux/macOS)
      if: runner.os != 'Windows'
      run: |
        chmod +x scripts/simple_test.ps1
        pwsh -ExecutionPolicy Bypass -File scripts/simple_test.ps1 -SkipBuild

    - name: 🧪 Run Native OMEGA Tests (Windows)
      if: runner.os == 'Windows'
      run: |
        powershell -ExecutionPolicy Bypass -File scripts/simple_test.ps1 -SkipBuild

    - name: 📊 Upload test results
      uses: actions/upload-artifact@v4
      if: always()
      with:
        name: test-results-${{ matrix.os }}-${{ matrix.node-version }}
        path: test-reports/

  lint:
    name: 🔍 Code Quality
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd lsp-server && npm ci && cd ..
        cd omega-vscode-extension && npm ci && cd ..

    - name: 🔍 Run ESLint (LSP Server)
      run: |
        cd lsp-server
        npx eslint . --ext .js,.ts --format json --output-file ../eslint-results.json || true
        cd ..

    - name: 🔍 Run ESLint (VS Code Extension)
      run: |
        cd omega-vscode-extension
        npx eslint . --ext .js,.ts --format json --output-file ../eslint-extension-results.json || true
        cd ..

    - name: 📊 Upload lint results
      uses: actions/upload-artifact@v4
      with:
        name: lint-results
        path: |
          eslint-results.json
          eslint-extension-results.json

  security:
    name: 🔒 Security Scan
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd lsp-server && npm ci && cd ..
        cd omega-vscode-extension && npm ci && cd ..

    - name: 🔒 Run npm audit (LSP Server)
      run: |
        cd lsp-server
        npm audit --audit-level moderate --json > ../audit-lsp.json || true
        cd ..

    - name: 🔒 Run npm audit (VS Code Extension)
      run: |
        cd omega-vscode-extension
        npm audit --audit-level moderate --json > ../audit-extension.json || true
        cd ..

    - name: 📊 Upload security results
      uses: actions/upload-artifact@v4
      with:
        name: security-results
        path: |
          audit-lsp.json
          audit-extension.json

  build:
    name: 🏗️ Build
    runs-on: ${{ matrix.os }}
    strategy:
      matrix:
        os: [ubuntu-latest, windows-latest, macos-latest]

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd lsp-server && npm ci && cd ..
        cd omega-vscode-extension && npm ci && cd ..

    - name: 🏗️ Build VS Code extension
      run: |
        cd omega-vscode-extension
        npm run compile
        cd ..

    - name: 📦 Package VS Code extension
      run: |
        cd omega-vscode-extension
        npx vsce package
        cd ..

    - name: 📊 Upload build artifacts
      uses: actions/upload-artifact@v4
      with:
        name: build-artifacts-${{ matrix.os }}
        path: |
          omega-vscode-extension/*.vsix

  performance:
    name: ⚡ Performance Tests
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd lsp-server && npm ci && cd ..

    - name: ⚡ Run performance benchmarks
      run: |
        chmod +x scripts/performance_benchmark.sh
        ./scripts/performance_benchmark.sh

    - name: 📊 Upload performance results
      uses: actions/upload-artifact@v4
      with:
        name: performance-results
        path: test-reports/performance/

  coverage:
    name: 📊 Code Coverage
    runs-on: ubuntu-latest

    steps:
    - name: 📥 Checkout code
      uses: actions/checkout@v4

    - name: 🟢 Setup Node.js
      uses: actions/setup-node@v4
      with:
        node-version: '18.x'
        cache: 'npm'

    - name: 📦 Install dependencies
      run: |
        cd lsp-server && npm ci && cd ..
        cd omega-vscode-extension && npm ci && cd ..

    - name: 📊 Generate coverage report
      run: |
        # Run tests with coverage
        chmod +x scripts/simple_test.ps1
        ./scripts/simple_test.ps1

    - name: 📤 Upload coverage to Codecov
      uses: codecov/codecov-action@v3
      with:
        file: ./coverage/lcov.info
        flags: unittests
        name: codecov-umbrella

  notify:
    name: 📢 Notifications
    runs-on: ubuntu-latest
    needs: [test, lint, security, build]
    if: always()

    steps:
    - name: 📢 Notify on success
      if: needs.test.result == 'success' && needs.lint.result == 'success' && needs.security.result == 'success' && needs.build.result == 'success'
      run: |
        echo "✅ All checks passed! Ready for review."

    - name: 📢 Notify on failure
      if: needs.test.result == 'failure' || needs.lint.result == 'failure' || needs.security.result == 'failure' || needs.build.result == 'failure'
      run: |
        echo "❌ Some checks failed. Please review the results."
        exit 1