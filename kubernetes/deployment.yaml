apiVersion: apps/v1
kind: Deployment
metadata:
  name: omega-compiler
  namespace: omega-system
  labels:
    app: omega-compiler
    version: v1.0.0
    component: compiler
spec:
  replicas: 3
  strategy:
    type: RollingUpdate
    rollingUpdate:
      maxUnavailable: 1
      maxSurge: 1
  selector:
    matchLabels:
      app: omega-compiler
  template:
    metadata:
      labels:
        app: omega-compiler
        version: v1.0.0
        component: compiler
      annotations:
        prometheus.io/scrape: "true"
        prometheus.io/port: "8080"
        prometheus.io/path: "/metrics"
    spec:
      serviceAccountName: omega-compiler
      securityContext:
        runAsNonRoot: true
        runAsUser: 1000
        runAsGroup: 1000
        fsGroup: 1000
        seccompProfile:
          type: RuntimeDefault
      containers:
      - name: omega-compiler
        image: omega/compiler:1.0.0
        imagePullPolicy: IfNotPresent
        ports:
        - name: http
          containerPort: 8080
          protocol: TCP
        - name: metrics
          containerPort: 9090
          protocol: TCP
        env:
        - name: RUST_LOG
          value: "info"
        - name: OMEGA_ENV
          value: "production"
        - name: DATABASE_URL
          valueFrom:
            secretKeyRef:
              name: omega-secrets
              key: database-url
        - name: REDIS_URL
          valueFrom:
            secretKeyRef:
              name: omega-secrets
              key: redis-url
        - name: POD_NAME
          valueFrom:
            fieldRef:
              fieldPath: metadata.name
        - name: POD_NAMESPACE
          valueFrom:
            fieldRef:
              fieldPath: metadata.namespace
        - name: NODE_NAME
          valueFrom:
            fieldRef:
              fieldPath: spec.nodeName
        resources:
          requests:
            memory: "512Mi"
            cpu: "250m"
          limits:
            memory: "2Gi"
            cpu: "1000m"
        securityContext:
          allowPrivilegeEscalation: false
          readOnlyRootFilesystem: true
          runAsNonRoot: true
          runAsUser: 1000
          capabilities:
            drop:
            - ALL
        livenessProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 30
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3
        readinessProbe:
          httpGet:
            path: /ready
            port: http
          initialDelaySeconds: 5
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3
        startupProbe:
          httpGet:
            path: /health
            port: http
          initialDelaySeconds: 10
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 30
        volumeMounts:
        - name: tmp
          mountPath: /tmp
        - name: cache
          mountPath: /app/cache
        - name: logs
          mountPath: /app/logs
        - name: config
          mountPath: /app/config
          readOnly: true
      volumes:
      - name: tmp
        emptyDir:
          sizeLimit: 1Gi
      - name: cache
        emptyDir:
          sizeLimit: 5Gi
      - name: logs
        emptyDir:
          sizeLimit: 2Gi
      - name: config
        configMap:
          name: omega-config
      nodeSelector:
        kubernetes.io/os: linux
      tolerations:
      - key: "node.kubernetes.io/not-ready"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      - key: "node.kubernetes.io/unreachable"
        operator: "Exists"
        effect: "NoExecute"
        tolerationSeconds: 300
      affinity:
        podAntiAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            podAffinityTerm:
              labelSelector:
                matchExpressions:
                - key: app
                  operator: In
                  values:
                  - omega-compiler
              topologyKey: kubernetes.io/hostname
        nodeAffinity:
          preferredDuringSchedulingIgnoredDuringExecution:
          - weight: 100
            preference:
              matchExpressions:
              - key: node-type
                operator: In
                values:
                - compute-optimized
      terminationGracePeriodSeconds: 30

---
apiVersion: v1
kind: Service
metadata:
  name: omega-compiler-service
  namespace: omega-system
  labels:
    app: omega-compiler
    component: compiler
  annotations:
    service.beta.kubernetes.io/aws-load-balancer-type: nlb
    service.beta.kubernetes.io/aws-load-balancer-backend-protocol: http
spec:
  type: LoadBalancer
  ports:
  - name: http
    port: 80
    targetPort: http
    protocol: TCP
  - name: https
    port: 443
    targetPort: http
    protocol: TCP
  - name: metrics
    port: 9090
    targetPort: metrics
    protocol: TCP
  selector:
    app: omega-compiler
  sessionAffinity: None

---
apiVersion: v1
kind: ServiceAccount
metadata:
  name: omega-compiler
  namespace: omega-system
  labels:
    app: omega-compiler
automountServiceAccountToken: true

---
apiVersion: rbac.authorization.k8s.io/v1
kind: Role
metadata:
  namespace: omega-system
  name: omega-compiler-role
rules:
- apiGroups: [""]
  resources: ["configmaps", "secrets"]
  verbs: ["get", "list", "watch"]
- apiGroups: [""]
  resources: ["pods"]
  verbs: ["get", "list", "watch"]

---
apiVersion: rbac.authorization.k8s.io/v1
kind: RoleBinding
metadata:
  name: omega-compiler-rolebinding
  namespace: omega-system
subjects:
- kind: ServiceAccount
  name: omega-compiler
  namespace: omega-system
roleRef:
  kind: Role
  name: omega-compiler-role
  apiGroup: rbac.authorization.k8s.io

---
apiVersion: v1
kind: ConfigMap
metadata:
  name: omega-config
  namespace: omega-system
  labels:
    app: omega-compiler
data:
  config.toml: |
    [compiler]
    optimization_level = "release"
    target_dir = "/app/cache/targets"
    
    [logging]
    level = "info"
    format = "json"
    output = "/app/logs/omega.log"
    
    [security]
    enable_sandbox = true
    max_compilation_time = 300
    max_memory_usage = "1GB"
    
    [performance]
    worker_threads = 4
    compilation_cache = true
    cache_size = "500MB"

---
apiVersion: v1
kind: Secret
metadata:
  name: omega-secrets
  namespace: omega-system
  labels:
    app: omega-compiler
type: Opaque
data:
  # Base64 encoded values - replace with actual values
  database-url: cG9zdGdyZXNxbDovL29tZWdhOm9tZWdhX3Bhc3N3b3JkQHBvc3RncmVzOjU0MzIvb21lZ2FfZGI=
  redis-url: cmVkaXM6Ly9yZWRpczpyZWRpc19wYXNzd29yZEByZWRpczozNjM3OQ==

---
apiVersion: autoscaling/v2
kind: HorizontalPodAutoscaler
metadata:
  name: omega-compiler-hpa
  namespace: omega-system
  labels:
    app: omega-compiler
spec:
  scaleTargetRef:
    apiVersion: apps/v1
    kind: Deployment
    name: omega-compiler
  minReplicas: 3
  maxReplicas: 10
  metrics:
  - type: Resource
    resource:
      name: cpu
      target:
        type: Utilization
        averageUtilization: 70
  - type: Resource
    resource:
      name: memory
      target:
        type: Utilization
        averageUtilization: 80
  behavior:
    scaleDown:
      stabilizationWindowSeconds: 300
      policies:
      - type: Percent
        value: 10
        periodSeconds: 60
    scaleUp:
      stabilizationWindowSeconds: 60
      policies:
      - type: Percent
        value: 50
        periodSeconds: 60
      - type: Pods
        value: 2
        periodSeconds: 60
      selectPolicy: Max

---
apiVersion: policy/v1
kind: PodDisruptionBudget
metadata:
  name: omega-compiler-pdb
  namespace: omega-system
  labels:
    app: omega-compiler
spec:
  minAvailable: 2
  selector:
    matchLabels:
      app: omega-compiler