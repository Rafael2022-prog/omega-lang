version: '3.8'

services:
  # OMEGA Compiler Service
  omega-compiler:
    build:
      context: .
      dockerfile: Dockerfile
      target: builder
    image: omega/compiler:latest
    container_name: omega-compiler
    restart: unless-stopped
    ports:
      - "8080:8080"
    environment:
      - RUST_LOG=debug
      - OMEGA_ENV=development
      - DATABASE_URL=postgresql://omega:${POSTGRES_PASSWORD}@postgres:5432/omega_db
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    volumes:
      - ./examples:/app/examples:ro
      - ./test_suites:/app/test_suites:ro
      - omega_cache:/app/cache
      - omega_logs:/app/logs
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
    networks:
      - omega-network
    healthcheck:
      test: ["CMD", "omega", "--version"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"

  # PostgreSQL Database
  postgres:
    image: postgres:15-alpine
    container_name: omega-postgres
    restart: unless-stopped
    environment:
      - POSTGRES_DB=omega_db
      - POSTGRES_USER=omega
      - POSTGRES_PASSWORD=${POSTGRES_PASSWORD}
      - POSTGRES_INITDB_ARGS=--encoding=UTF-8 --lc-collate=C --lc-ctype=C
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql:ro
    ports:
      - "5432:5432"
    networks:
      - omega-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U omega -d omega_db"]
      interval: 10s
      timeout: 5s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # Redis Cache
  redis:
    image: redis:7-alpine
    container_name: omega-redis
    restart: unless-stopped
    command: redis-server --appendonly yes --requirepass ${REDIS_PASSWORD}
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - omega-network
    healthcheck:
      test: ["CMD", "redis-cli", "-a", "${REDIS_PASSWORD}", "--raw", "PING"]
      interval: 10s
      timeout: 3s
      retries: 5
      start_period: 30s
    security_opt:
      - no-new-privileges:true

  # OMEGA Web Interface (Optional)
  omega-web:
    build:
      context: ./web
      dockerfile: Dockerfile
    image: omega/web:latest
    container_name: omega-web
    restart: unless-stopped
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=development
      - API_URL=http://omega-compiler:8080
      - REDIS_URL=redis://:${REDIS_PASSWORD}@redis:6379
    depends_on:
      - omega-compiler
      - redis
    networks:
      - omega-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3000/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    security_opt:
      - no-new-privileges:true
    read_only: true
    tmpfs:
      - /tmp:noexec,nosuid,size=100m
    user: "1000:1000"

  # Monitoring with Prometheus
  prometheus:
    image: prom/prometheus:latest
    container_name: omega-prometheus
    restart: unless-stopped
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - omega-network
    security_opt:
      - no-new-privileges:true

  # Grafana for Visualization
  grafana:
    image: grafana/grafana:latest
    container_name: omega-grafana
    restart: unless-stopped
    ports:
      - "3001:3000"
    environment:
      - GF_SECURITY_ADMIN_PASSWORD=${GF_SECURITY_ADMIN_PASSWORD}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/dashboards:/etc/grafana/provisioning/dashboards:ro
      - ./monitoring/grafana/datasources:/etc/grafana/provisioning/datasources:ro
    depends_on:
      - prometheus
    networks:
      - omega-network
    security_opt:
      - no-new-privileges:true

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: omega-nginx
    restart: unless-stopped
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf:ro
      - ./nginx/ssl:/etc/nginx/ssl:ro
      - nginx_logs:/var/log/nginx
    depends_on:
      - omega-compiler
      - omega-web
    networks:
      - omega-network
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3
    security_opt:
      - no-new-privileges:true

  # Log Aggregation with Fluentd
  fluentd:
    build:
      context: ./logging
      dockerfile: Dockerfile
    image: omega/fluentd:latest
    container_name: omega-fluentd
    restart: unless-stopped
    volumes:
      - ./logging/fluent.conf:/fluentd/etc/fluent.conf:ro
      - omega_logs:/var/log/omega
      - nginx_logs:/var/log/nginx:ro
    ports:
      - "24224:24224"
      - "24224:24224/udp"
    networks:
      - omega-network
    security_opt:
      - no-new-privileges:true

# Networks
networks:
  omega-network:
    driver: bridge
    ipam:
      config:
        - subnet: 172.20.0.0/16

# Volumes
volumes:
  postgres_data:
    driver: local
  redis_data:
    driver: local
  prometheus_data:
    driver: local
  grafana_data:
    driver: local
  omega_cache:
    driver: local
  omega_logs:
    driver: local
  nginx_logs:
    driver: local

# Development override
# Use: docker-compose -f docker-compose.yml -f docker-compose.dev.yml up
